{"version":3,"sources":["dataFetcher/QuizFetcher.js","models/Quiz.js","actions/quizActionCreator.js","reducers/quizReducer.js","reducers/index.js","store/index.js","components/Button/Button.jsx","components/Home/Home.jsx","components/Quiz/Quiz.jsx","App.js","index.js"],"names":["QuizFetcher","axios","get","response","data","Quiz","question","correctAnswer","incorrectAnswers","this","_question","_correctAnswer","_incorrectAnswers","_","shuffle","answer","fetch","quizList","createQuizInstancesWithData","results","quizDataList","map","quizData","he","decode","correct_answer","incorrect_answers","str","fetchQuizzesRequest","type","fetchQuizzesSucces","fetchQuizzesFailur","error","fetchQuizzesReset","initialState","isLoading","quizzes","rootReducer","combineReducers","quizInfo","state","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","middleware","thunk","store","createStore","applyMiddleware","Button","props","onClickHandler","className","onClick","children","Home","history","push","currentIndex","numberOfCorrect","restart","setState","fetchQuizzes","quiz","judgeCorrectAnswer","alert","length","renderLoading","renderQuiz","renderResult","to","answers","shuffleAnswers","index","key","selectAnswer","React","Component","mapDispatchToProps","dispatch","a","quizModel","connect","App","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b0aa884c.chunk.js","sourcesContent":["import axios from 'axios';\n\n//APIでクイズデータを取得\nconst API_URL = \"https://opentdb.com/api.php?amount=10&type=multiple\";\n\nclass QuizFetcher {\n    static async fetch(){\n        const response = await axios.get(API_URL);\n        return response.data;\n    }\n}\n\nexport default QuizFetcher;","import _ from 'lodash';\nimport he from 'he';\nimport QuizFetcher from '../dataFetcher/QuizFetcher';\n\nclass Quiz {\n    constructor({question,correctAnswer,incorrectAnswers}){\n\n        this._question = question;\n        this._correctAnswer = correctAnswer;\n        this._incorrectAnswers = [...incorrectAnswers];\n    };\n\n    get question(){\n        return this._question;\n    }\n\n    get correctAnswer(){\n        return this._correctAnswer;\n    }\n\n    //選択肢をシャッフルさせる（lodashの_.shuffleを使う）\n    shuffleAnswers(){\n        return _.shuffle([this._correctAnswer, ...this._incorrectAnswers]);\n    }\n\n    //選択した回答が正解か判定する\n    judgeCorrectAnswer(answer){\n        return answer === this._correctAnswer;\n    }\n\n    static async fetchAndCreateQuizzes(){\n        //QUizFetcherからクイズリストを作成\n        const quizList = await QuizFetcher.fetch();\n\n        return Quiz.createQuizInstancesWithData(quizList.results);\n    }\n\n    static createQuizInstancesWithData(quizDataList){\n        //クイズインスタンスの作成\n        return quizDataList.map(quizData => {\n            return{\n                question: he.decode(quizData.question),\n                correctAnswer: he.decode(quizData.correct_answer),\n                incorrectAnswers: quizData.incorrect_answers.map(str => he.decode(str))\n            }\n        })\n        .map(quizData => {\n            return new Quiz(quizData);\n        })\n    }\n   /*static async fetchAndCreateQuizzes(){\n    const QuizList = await QuizFetcher.fetch();\n\n        return QuizList.results.map(result => {\n            return {\n                question: he.decode(result.question),\n                correctAnswer: he.decode(result.correct_answer),\n                incorrectAnswers: result.incorrect_answers.map(str => he.decode(str))\n            }\n        })\n        .map(quizData => {\n            return new Quiz(quizData);\n    });*/\n};\n\nexport default Quiz;","import axios from 'axios';\nimport quizModel from '../models/Quiz';\n\nconst API_URL = 'https://opentdb.com/api.php?amount=10&type=multiple';\n\nexport const FETCH_QUIZZES_REQUEST = 'FETCH_QUIZZES_REQUEST';\nexport const FETCH_QUIZZES_SUCCES = 'FETCH_QUIZZES_SUCCES';\nexport const FETCH_QUIZZES_FAILUR = 'FETCH_QUIZZES_FAILUR';\nexport const FETCH_QUIZZES_RESET = 'FETCH_QUIZZES_RESET';\n\nexport const fetchQuizzes = ()=> {\n    return async ( dispatch ) => {\n        dispatch( fetchQuizzesReset() );\n        dispatch( fetchQuizzesRequest() );\n        try{\n            const response = await axios.get(API_URL);\n            const results = response.data.results;\n            const data = quizModel.createQuizInstancesWithData( results );\n\n            dispatch( fetchQuizzesSucces( data ) );\n        }catch (error){\n            dispatch( fetchQuizzesFailur( error ) );\n        };\n    };\n};\n    const fetchQuizzesRequest = () =>{\n        return {\n            type: FETCH_QUIZZES_REQUEST,\n        };\n    };\n\n    const fetchQuizzesSucces = ( data ) => {\n        return {\n            type: FETCH_QUIZZES_SUCCES,\n            data\n        };\n    };\n\n    const fetchQuizzesFailur = ( error ) => {\n        return {\n            type: FETCH_QUIZZES_FAILUR,\n            error\n        };\n    };\n\n    const fetchQuizzesReset = () => {\n        return{\n            type: FETCH_QUIZZES_RESET\n        };\n    };","import { FETCH_QUIZZES_REQUEST,\n        FETCH_QUIZZES_SUCCES,\n        FETCH_QUIZZES_FAILUR,\n        FETCH_QUIZZES_RESET\n} from '../actions/quizActionCreator';\n\n//State初期値\nconst initialState = {\n    isLoading: false,\n    quizzes: [],\n    error: null\n};\n\nexport const quizReducer = (state = initialState, action) =>{\n    switch(action.type){\n        case FETCH_QUIZZES_REQUEST :\n            return{\n                ...state,\n                isLoading: true\n            }\n        \n        case FETCH_QUIZZES_SUCCES:\n            return{\n                ...state,\n                isLoading: false,\n                quizzes: action.data,\n                error: null\n            }\n\n        case FETCH_QUIZZES_FAILUR:\n            return{\n                ...state,\n                isLoading: false,\n                error: action.error\n            }\n        \n        case FETCH_QUIZZES_RESET:\n            return{\n                ...state,\n                isLoading: false,\n                quizzes: [],\n                error: null\n            }\n        default:\n            return state;\n    };\n};","import { combineReducers } from 'redux';\nimport { quizReducer } from './quizReducer';\n\nconst rootReducer = combineReducers({\n    quizInfo: quizReducer\n});\n\nexport default rootReducer;","import {compose, createStore, applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/index';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst middleware = [thunk];\nconst store = createStore(\n    rootReducer,\n    composeEnhancers(\n        applyMiddleware(...middleware)\n    )\n);\n\nexport default store;","import React from 'react';\nimport './Button.css';\n\nconst Button = (props) => {\n    let { onClickHandler } = props;\n\n    if( typeof onClickHandler !== 'function'){\n        onClickHandler = () =>{};\n    };\n\n    return(\n        <div className=\"Button\" onClick={onClickHandler}>\n        { props.children }\n        </div>\n    )\n}\n\nexport default Button;","import React from 'react';\nimport Button from '../Button/Button';\n\nconst Home = ( {history} ) => {\n    return(\n        <div>\n            <h1>クイズアプリ</h1>\n        <Button onClickHandler={() => {\n            history.push('Quiz/');\n        }} >クイズを始める</Button>\n        </div>\n    )\n}\n\nexport default Home;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Button from '../Button/Button';\nimport { connect } from 'react-redux';\nimport { fetchQuizzes } from '../../actions/quizActionCreator';\nimport '../../models/Quiz.js';\nimport './Quiz.css';\n\nclass Quiz extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            currentIndex: 0,\n            numberOfCorrect: 0\n        };\n    };\n    componentDidMount() {\n        this.restart();\n    };\n\n    restart() {\n        this.setState({\n            currentIndex: 0,\n            numberOfCorrect: 0\n        })\n        this.props.fetchQuizzes();\n    }\n\n    selectAnswer(quiz, answer) {\n        let { currentIndex, numberOfCorrect } = this.state;\n        const isCorrect = quiz.judgeCorrectAnswer(answer);\n\n        if (isCorrect) {\n            numberOfCorrect ++;\n            alert('Correct answer!');\n        } else {\n            alert(`Wrong answer....this correct answer is${quiz.correctAnswer}`);\n        }\n        currentIndex ++;\n        this.setState({\n            currentIndex,\n            numberOfCorrect\n        });\n    };\n\n    render() {\n        const { quizzes } = this.props.quizInfo;\n        const { currentIndex } = this.state;\n        if (quizzes.length === 0 ) {\n            return this.renderLoading();\n        }\n        if (quizzes.length > 0 && currentIndex < quizzes.length) {\n            return this.renderQuiz();\n        }\n        if (quizzes.length > 0 && quizzes.length <= currentIndex) {\n            return this.renderResult();\n        }\n    }\n\n    renderLoading() {\n        return (\n            <div>\n                <p>読み込み中・・・</p>\n                <hr />\n                <Link to={'/'}>トップページに戻る</Link>\n            </div>\n        );\n    }\n\n    renderQuiz() {\n        const { quizzes } = this.props.quizInfo;\n        const { currentIndex } = this.state;\n        const quiz = quizzes[currentIndex];\n        const answers = quiz.shuffleAnswers().map((answer, index) => {\n            return (\n                <li key={index}>\n                    <Button onClickHandler={() => {\n                        this.selectAnswer(quiz, answer);\n                    }}>{answer}</Button>\n                </li>\n            );\n        });\n\n        return (\n            <div>\n                <p>{quiz.question}</p>\n                <ul className='quiz-list'>{answers}</ul>\n                <hr />\n                <Link to={'/'}>トップページに戻る</Link>\n            </div>\n        )\n    }\n\n    renderResult() {\n        const { quizzes } = this.props.quizInfo;\n        const { numberOfCorrect } = this.state;\n        return (\n            <div>\n                <h1>クイズ結果</h1>\n                <p>{`${numberOfCorrect}/${quizzes.length}correct!`}</p>\n                <Button onClickHandler={() => this.restart()}>リスタート</Button>\n                <hr />\n                <Link to={'/'}>トップページに戻る</Link>\n            </div>\n        )\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        quizInfo: state.quizInfo\n    }\n};\n\nconst mapDispatchToProps = { fetchQuizzes };\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Quiz);","import React from 'react';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport Home from './components/Home/Home';\nimport Quiz from './components/Quiz/Quiz';\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Route path=\"/\" exact component={Home}/>\n        <Route path=\"/Quiz\" exact component={Quiz}/>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store/index';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}